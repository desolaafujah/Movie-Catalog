"use strict";var d=Object.create;var u=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var $=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var j=(t,o,e,i)=>{if(o&&typeof o=="object"||typeof o=="function")for(let r of $(o))!v.call(t,r)&&r!==e&&u(t,r,{get:()=>o[r],enumerable:!(i=f(o,r))||i.enumerable});return t};var a=(t,o,e)=>(e=t!=null?d(b(t)):{},j(o||!t||!t.__esModule?u(e,"default",{value:t,enumerable:!0}):e,t));var s=a(require("os")),p=a(require("minimist"));var m=require("common-tags"),P=a(require("update-notifier"));var J=1e3*60*60*24*7;function l(){let t=m.stripIndent`
    Usage
      $ git suggest-coauthors
    Options
      -h  Prints usage information
    Example
      $ git suggest-coauthors  # suggests coauthors to add based on existing committers to the repo
  `;console.log(t)}var c=require("child_process");function n(t){return(0,c.spawnSync)(t,{encoding:"utf8",shell:!0})}function x(t){let o=n("git --version").stdout.trim(),[e,i]=y(o);return e>=2&&i>=13?n(`git rev-parse --git-path ${t}`).stdout.trim():n(`git rev-parse --show-cdup && git rev-parse --git-path ${t}`).stdout.trim().replace(/(\r\n|\r|\n)/,"")}function y(t){let[,o,e,i]=/(\d)\.(\d*)\.(\d*)/gm.exec(t);return[o,e,i]}function E(){return n("git rev-parse --is-inside-work-tree").status===0}function C(){return n("git rev-parse --show-toplevel").stdout.trim()}function S(){return n("git shortlog --summary --email --number HEAD").stdout.trim()}var g={gitPath:x,insideWorkTree:E,topLevelDirectory:C},h={shortLogAuthorSummary:S};var L=(0,p.default)(process.argv.slice(2),{alias:{h:"help"}});async function O(t){t.help&&(l(),process.exit(0)),g.insideWorkTree()||(console.error("Error: not a git repository"),process.exit(1)),await w(),process.exit(0)}async function w(){try{let o=h.shortLogAuthorSummary().split(`
`).filter(e=>e!=="").map(e=>U(e));o.length>0?(console.log(s.default.EOL+"Here are some suggestions for coauthors based on existing authors of this repository"+s.default.EOL),console.log(A(o)),console.log(s.default.EOL+"Paste any line above into your console to add them as an author"+s.default.EOL)):console.log("Unable to find existing authors")}catch(t){console.error(`Error: ${t.message}`),process.exit(1)}}function U(t){let o=H(t);return{name:o,email:T(t),initials:D(o)}}function A(t){return t.sort().map(o=>["git add-coauthor",o.initials,JSON.stringify(o.name),o.email].join(" ")).join(s.default.EOL)}function D(t){return t.split(" ").map(o=>o[0].toLowerCase()).join("")}function H(t){return t.split("	")[1].split(" ").slice(0,-1).join(" ")}function T(t){return t.split("	")[1].split(" ").pop().slice(1,-1)}O(L);
