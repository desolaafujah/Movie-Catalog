"use strict";var ct=Object.create;var M=Object.defineProperty;var mt=Object.getOwnPropertyDescriptor;var lt=Object.getOwnPropertyNames;var ht=Object.getPrototypeOf,gt=Object.prototype.hasOwnProperty;var pt=(t,o,e,r)=>{if(o&&typeof o=="object"||typeof o=="function")for(let n of lt(o))!gt.call(t,n)&&n!==e&&M(t,n,{get:()=>o[n],enumerable:!(r=mt(o,n))||r.enumerable});return t};var v=(t,o,e)=>(e=t!=null?ct(ht(t)):{},pt(o||!t||!t.__esModule?M(e,"default",{value:t,enumerable:!0}):e,t));var it=v(require("os")),nt=v(require("minimist")),P=require("common-tags"),j=require("git-mob-core");var H=require("child_process");function c(t){return(0,H.spawnSync)(t,{encoding:"utf8",shell:!0})}function T(t){return c(`git config --get ${t}`).stdout.trim()}function ft(t){return c(`git config --get-all ${t}`).stdout.trim()}function D(t,o){let{status:e,stderr:r}=c(`git config ${t} "${o}"`);if(e!==0){console.log(r);let n=`Option ${t} has multiple values. Cannot overwrite multiple values for option ${t} with a single value.`;throw new Error(n)}}function dt(t,o){c(`git config --add ${t} "${o}"`)}function A(t){return c(`git config ${t}`).status===0}function bt(t){c(`git config --remove-section ${t}`)}function wt(t){let o=c("git --version").stdout.trim(),[e,r]=vt(o);return e>=2&&r>=13?c(`git rev-parse --git-path ${t}`).stdout.trim():c(`git rev-parse --show-cdup && git rev-parse --git-path ${t}`).stdout.trim().replace(/(\r\n|\r|\n)/,"")}function vt(t){let[,o,e,r]=/(\d)\.(\d*)\.(\d*)/gm.exec(t);return[o,e,r]}function At(){return c("git rev-parse --is-inside-work-tree").status===0}function yt(){return c("git rev-parse --show-toplevel").stdout.trim()}function $t(){return T("commit.template")}function Et(t){D("--global commit.template",t)}function xt(){return A("commit.template")}function Pt(){return A("--local commit.template")}function jt(){return A("--global commit.template")}function Tt(){return T("--global commit.template")}var a={set:D,get:T,getAll:ft,add:dt,has:A,removeSection:bt,getTemplatePath:$t,setTemplatePath:Et,hasTemplatePath:xt,usingLocalTemplate:Pt,usingGlobalTemplate:jt,getGlobalTemplate:Tt},J={gitPath:wt,insideWorkTree:At,topLevelDirectory:yt};var h=require("fs"),$=require("util"),p=require("git-mob-core");function y({name:t,email:o}){return`${t} <${o}>`}function f(t,o,e){async function r(i){let s=t||(0,$.promisify)(h.readFile);try{return await s(i,"utf8")}catch(u){throw new Error(u.message)}}async function n(i,s){let u=o||(0,$.promisify)(h.appendFile);try{return await u(i,s,"utf8")}catch(l){throw new Error(l.message)}}async function m(i,s){let u=e||(0,$.promisify)(h.writeFile);try{return await u(i,s,"utf8")}catch(l){throw new Error(l.message)}}return{read:async()=>{let i=await r((0,p.pathToCoAuthors)());try{return JSON.parse(i)}catch(s){throw new Error("Invalid JSON "+s.message)}},write:async i=>{try{return n((0,p.pathToCoAuthors)(),JSON.stringify(i,null,2))}catch(s){throw new Error("Invalid JSON "+s.message)}},overwrite:async i=>{try{return m((0,p.pathToCoAuthors)(),JSON.stringify(i,null,2))}catch(s){throw new Error("Invalid JSON "+s.message)}},fileExists:()=>(0,h.existsSync)((0,p.pathToCoAuthors)()),author(i,s){let{coauthors:u}=s;return Ct(i,u),u[i]},coAuthorsInitials(i,s){let{coauthors:u}=i;return Object.keys(u).reduce((l,w)=>(s.includes(y(u[w]))&&l.push(w),l),[])},toList(i){return Object.entries(i.coauthors).map(u=>{let[l,{name:w,email:ut}]=u;return[l,w,ut].join(" ")})}}}function Ct(t,o){if(!(t in o))throw new Error(`Author with initials "${t}" not found!`)}var d=require("fs"),g=require("os"),N=require("path");function U(t){return t.code!=="ENOENT"}function Lt(t,o){return new Promise((e,r)=>{(0,d.readFile)(t,"utf8",(n,m)=>{n&&U(n)&&r(n);let i=o;m&&(i=m.replace(/(\r\n|\r|\n){1,2}Co-authored-by.*/g,"")+o),(0,d.writeFile)(t,i,s=>{s&&r(s),e()})})})}function St(t){return new Promise((o,e)=>{(0,d.readFile)(t,"utf8",(r,n)=>{r&&U(r)&&e(r),o(n)})})}function Ot(t){return t.map(o=>"Co-authored-by: "+o).join(g.EOL)}function E(t,o,e){let r=o||Lt,n=e||St;return{writeCoAuthors:async m=>{let i=Ot(m);await r(t,g.EOL+g.EOL+i)},readCoAuthors:()=>n(t),removeCoAuthors:async()=>r(t,"")}}function C(){return process.env.GITMOB_MESSAGE_PATH||a.getTemplatePath()}function I(){return process.env.GITMOB_MESSAGE_PATH||(0,N.join)((0,g.homedir)(),".gitmessage")}var B=require("os"),W=require("common-tags"),z=v(require("update-notifier"));var L={name:"git-mob",version:"2.4.0",description:"CLI tool for adding co-authors to commits.",scripts:{build:"rimraf dist && bob","test:w":"npm run build -- -w -t & env-cmd -f test-helpers/env.js ava --watch --serial --no-worker-threads",pretest:"npm run build -- -t",test:"npm run testbase",checks:"npm run test && npm run lint",lint:"xo --cwd=../../",testbase:"env-cmd -f test-helpers/env.js ava --serial --no-worker-threads",minifytest:"npm run build -- -m -t && npm run testbase",preversion:"npm run checks",prepack:"npm run build -- -m",postinstall:"node ./dist/install/create-author-file.js"},bin:{"git-mob":"bin/mob.js","git-mob-print":"bin/mob-print.js","git-solo":"bin/solo.js","git-add-coauthor":"bin/add-coauthor.js","git-delete-coauthor":"bin/delete-coauthor.js","git-edit-coauthor":"bin/edit-coauthor.js","git-suggest-coauthors":"bin/suggest-coauthors.js"},repository:{type:"git",url:"git@github.com:rkotze/git-mob.git",directory:"packages/git-mob"},engines:{node:">=10"},keywords:["cli","cli-app","git-pair","git-duet","git","github","co-author","pairing","pair programming","mob programming","extreme programming","xp","social coding"],author:"Richard Kotze",license:"MIT",contributors:[{name:"Richard Kotze",url:"https://github.com/rkotze"},{name:"Dennis Ideler",url:"https://github.com/dideler"}],dependencies:{"common-tags":"^1.8.0","git-mob-core":"^0.4.0",minimist:"^1.2.6","update-notifier":"^5.1.0"},devDependencies:{"@ava/typescript":"^3.0.1","@types/node":"^18.7.14","@types/sinon":"^10.0.13",ava:"^5.0.1",bob:"file:../../packages/bob","env-cmd":"^10.1.0",eol:"^0.9.1",rimraf:"^3.0.2",sinon:"^14.0.0",tempy:"^3.0.0",typescript:"^4.8.2"},ava:{files:["dist/**/*.spec.js"],ignoredByWatcher:["dist","test-env","test-helpers"],typescript:{rewritePaths:{"src/":"build/"},compile:!1}}};var kt=1e3*60*60*24*7;function _(){let t=W.stripIndent`
    Usage
      $ git mob <co-author-initials> <GitHub username>
      $ git solo
      $ git mob-print
      $ git add-coauthor <co-author-initials> "Coauthor Name" <coauthor-email-address>
      $ git delete-coauthor <co-author-initials>
      $ git edit-coauthor <co-author-initials> --name="Coauthor Name" --email="coauthor-email-address"
      $ git suggest-coauthors

    Options
      -h  Prints usage information
      -v  Prints current version
      -l  Prints list of available co-authors
      -o  Overwrite the main author

    Examples
      $ git mob jd     # Set John Doe as co-author
      $ git mob jd am  # Set John & Amy as co-authors
      $ git mob rkotze # Set co-author from GitHub username
      $ git mob -l     # Show a list of all co-authors
      $ git mob -o jd  # Will change main author to jd
      $ git solo       # Dissipate the mob
      $ git mob-print  # Prints git-mob template to stdout. Used for prepare-commit-msg hook.
  `;console.log(t)}function R(){console.log(L.version)}function V(t=kt){(0,z.default)({pkg:L,updateCheckInterval:t}).notify({isGlobal:!0})}function K(t){console.log(t.map(o=>`${o.key}, ${o.name}, ${o.email}`).join(B.EOL))}var S=v(require("os"));function O({name:t,email:o}){let e;return(t===""||o==="")&&(e="Warning: Missing information for the primary author. Set with:"),t===""&&(e+=S.default.EOL+'$ git config --global user.name "Jane Doe"'),o===""&&(e+=S.default.EOL+'$ git config --global user.email "jane@example.com"'),e}var Ft="\x1B[31m",Mt="\x1B[33m",Y="\x1B[0m";function b(t){return Ft+t+Y}function G(t){return Mt+t+Y}function k(){return a.getAll("--global git-mob.co-author")}function F(){return a.has("--global git-mob.co-author")}function Z(t){a.add("--global git-mob.co-author",t)}function q(){a.removeSection("--global git-mob")}function Ht(){return a.get("--local git-mob-config.use-local-template")==="true"}function Dt(){return a.get("--global git-mob-config.github-fetch")==="true"}function Q(t,o){a.set("user.name",t),a.set("user.email",o)}var x={useLocalTemplate:Ht,fetchFromGitHub:Dt};var ot=require("git-mob-core");async function X(t){await f().overwrite(t)}async function et(t,o,e=ot.fetchGitHubAuthors,r=X){let n=Jt(t,o);if(n.length>0&&x.fetchFromGitHub()){let m=await e(n,"git-mob-cli"),i={coauthors:{...o,...Nt(m)}};return await r(i),tt(t,i.coauthors)}return tt(t,o)}function Jt(t,o){return t.filter(e=>!rt(e,o))}function rt(t,o){return t in o}function Nt(t){let o={};for(let e of t)o[e.key]={name:e.name,email:e.email};return o}function tt(t,o){return t.map(e=>(rt(e,o)||Ut(e),y(o[e])))}function Ut(t){throw new Error(`Author with initials "${t}" not found!`)}V();var It=(0,nt.default)(process.argv.slice(2),{boolean:["h","v","l","o"],alias:{h:"help",v:"version",l:"list",o:"override"}});Bt(It);async function Bt(t){t.help&&(_(),process.exit(0)),t.version&&(R(),process.exit(0)),t.list&&(await Wt(),process.exit(0)),J.insideWorkTree()||(console.error("Error: not a Git repository"),process.exit(1)),t.override?_t(t._):st(t._)}function st(t){t.length===0?(at(),a.usingLocalTemplate()&&F()&&E(C()).writeCoAuthors(k().split(it.default.EOL))):zt(t)}function at(){let t=(0,j.getPrimaryAuthor)();console.log(Rt(t)),F()&&console.log(k()),!x.useLocalTemplate()&&a.usingLocalTemplate()&&console.log(G(P.stripIndents`Warning: Git Mob uses Git global config.
    Using local commit.template could mean your template does not have selected co-authors appended after switching projects.
    See: https://github.com/rkotze/git-mob/discussions/81`)),O(t)&&console.warn(b(O(t)))}async function Wt(){try{let t=await(0,j.getAllAuthors)();K(t)}catch(t){console.error(b(`Error: ${t.message}`)),process.exit(1)}}async function zt(t){try{let e=await f().read(),r=await et(t,e.coauthors);Vt(),q();for(let n of r)Z(n);E(C()).writeCoAuthors(r),a.usingLocalTemplate()&&a.usingGlobalTemplate()&&E(a.getGlobalTemplate()).writeCoAuthors(r),at()}catch(o){console.error(b(`Error: ${o.message}`)),o.message.includes("not found!")&&console.log(G('Run "git config --global git-mob-config.github-fetch true" to fetch GitHub authors.')),process.exit(1)}}async function _t(t){try{let o=f(),e=await o.read(),r=o.author(t.shift(),e);Q(r.name,r.email),st(t)}catch(o){console.error(b(`Error: ${o.message}`)),process.exit(1)}}function Rt({name:t,email:o}){return P.oneLine`${t} <${o}>`}function Vt(){a.hasTemplatePath()||a.setTemplatePath(I())}
