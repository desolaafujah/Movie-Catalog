"use strict";var x=Object.create;var g=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var P=Object.getPrototypeOf,J=Object.prototype.hasOwnProperty;var C=(o,t,i,c)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of O(t))!J.call(o,s)&&s!==i&&g(o,s,{get:()=>t[s],enumerable:!(c=v(t,s))||c.enumerable});return o};var d=(o,t,i)=>(i=o!=null?x(P(o)):{},C(t||!o||!o.__esModule?g(i,"default",{value:o,enumerable:!0}):i,o));var y=d(require("minimist"));var f=require("common-tags"),S=d(require("update-notifier"));var A=1e3*60*60*24*7;function p(){let o=f.stripIndent`
    Usage
      $ git edit-coauthor <co-author-initials> name="Coauthor Name" email="Coauthor Email"
    Options
      -h  Prints usage information
    Examples
      $ git edit-coauthor jd --name="Jeb Diamond" --email="jeb@Diamond.com"    # Updates email and name
      $ git edit-coauthor jd --name="Jeb Diamond"                           # Updates just the name
      $ git edit-coauthor jd --email="jeb@diamond.com"                      # Updates just the email

  `;console.log(o)}var u=require("fs"),h=require("util"),m=require("git-mob-core");function w({name:o,email:t}){return`${o} <${t}>`}function $(o,t,i){async function c(e){let r=o||(0,h.promisify)(u.readFile);try{return await r(e,"utf8")}catch(a){throw new Error(a.message)}}async function s(e,r){let a=t||(0,h.promisify)(u.appendFile);try{return await a(e,r,"utf8")}catch(n){throw new Error(n.message)}}async function E(e,r){let a=i||(0,h.promisify)(u.writeFile);try{return await a(e,r,"utf8")}catch(n){throw new Error(n.message)}}return{read:async()=>{let e=await c((0,m.pathToCoAuthors)());try{return JSON.parse(e)}catch(r){throw new Error("Invalid JSON "+r.message)}},write:async e=>{try{return s((0,m.pathToCoAuthors)(),JSON.stringify(e,null,2))}catch(r){throw new Error("Invalid JSON "+r.message)}},overwrite:async e=>{try{return E((0,m.pathToCoAuthors)(),JSON.stringify(e,null,2))}catch(r){throw new Error("Invalid JSON "+r.message)}},fileExists:()=>(0,u.existsSync)((0,m.pathToCoAuthors)()),author(e,r){let{coauthors:a}=r;return U(e,a),a[e]},coAuthorsInitials(e,r){let{coauthors:a}=e;return Object.keys(a).reduce((n,l)=>(r.includes(w(a[l]))&&n.push(l),n),[])},toList(e){return Object.entries(e.coauthors).map(a=>{let[n,{name:l,email:j}]=a;return[n,l,j].join(" ")})}}}function U(o,t){if(!(o in t))throw new Error(`Author with initials "${o}" not found!`)}async function b({_:o,...t}){if("name"in t||"email"in t){let[i]=o,c=$(),s=await c.read();i in s.coauthors?(t.name&&(s.coauthors[i].name=t.name),t.email&&(s.coauthors[i].email=t.email),await c.overwrite(s),console.log(i+" has been updated.")):console.error(i+" does not exist in your .git-coauthors file.")}else console.error("Please provide a name or an email property. Use -h for examples.")}var N=(0,y.default)(process.argv.slice(2),{alias:{h:"help"}});async function F(o){o.help&&(p(),process.exit(0)),await b(o),process.exit(0)}F(N);
