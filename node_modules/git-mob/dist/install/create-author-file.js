"use strict";var h=require("git-mob-core");var i=require("fs"),u=require("util"),a=require("git-mob-core");function l({name:e,email:s}){return`${e} <${s}>`}function m(e,s,w){async function f(r){let t=e||(0,u.promisify)(i.readFile);try{return await t(r,"utf8")}catch(o){throw new Error(o.message)}}async function g(r,t){let o=s||(0,u.promisify)(i.appendFile);try{return await o(r,t,"utf8")}catch(n){throw new Error(n.message)}}async function y(r,t){let o=w||(0,u.promisify)(i.writeFile);try{return await o(r,t,"utf8")}catch(n){throw new Error(n.message)}}return{read:async()=>{let r=await f((0,a.pathToCoAuthors)());try{return JSON.parse(r)}catch(t){throw new Error("Invalid JSON "+t.message)}},write:async r=>{try{return g((0,a.pathToCoAuthors)(),JSON.stringify(r,null,2))}catch(t){throw new Error("Invalid JSON "+t.message)}},overwrite:async r=>{try{return y((0,a.pathToCoAuthors)(),JSON.stringify(r,null,2))}catch(t){throw new Error("Invalid JSON "+t.message)}},fileExists:()=>(0,i.existsSync)((0,a.pathToCoAuthors)()),author(r,t){let{coauthors:o}=t;return p(r,o),o[r]},coAuthorsInitials(r,t){let{coauthors:o}=r;return Object.keys(o).reduce((n,c)=>(t.includes(l(o[c]))&&n.push(c),n),[])},toList(r){return Object.entries(r.coauthors).map(o=>{let[n,{name:c,email:d}]=o;return[n,c,d].join(" ")})}}}function p(e,s){if(!(e in s))throw new Error(`Author with initials "${e}" not found!`)}var E={coauthors:{hh:{name:"Hulk Hogan",email:"hulk_hogan22@hotmail.org"}}};F();async function F(){let e=m();if(e.fileExists())console.log(`${(0,h.pathToCoAuthors)()} file already exists`);else try{await e.write(E),console.log("Add co-authors to:",(0,h.pathToCoAuthors)())}catch(s){console.log("Something went wrong adding a new co-authors file, error:",s)}}
