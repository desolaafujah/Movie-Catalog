"use strict";var j=Object.create;var m=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var k=(t,o,e,i)=>{if(o&&typeof o=="object"||typeof o=="function")for(let r of P(o))!x.call(t,r)&&r!==e&&m(t,r,{get:()=>o[r],enumerable:!(i=y(o,r))||i.enumerable});return t};var c=(t,o,e)=>(e=t!=null?j(w(t)):{},k(o||!t||!t.__esModule?m(e,"default",{value:t,enumerable:!0}):e,t));var b=c(require("minimist")),v=require("common-tags"),s=require("git-mob-core");var u=require("child_process");function n(t){return(0,u.spawnSync)(t,{encoding:"utf8",shell:!0})}function E(t){let o=n("git --version").stdout.trim(),[e,i]=D(o);return e>=2&&i>=13?n(`git rev-parse --git-path ${t}`).stdout.trim():n(`git rev-parse --show-cdup && git rev-parse --git-path ${t}`).stdout.trim().replace(/(\r\n|\r|\n)/,"")}function D(t){let[,o,e,i]=/(\d)\.(\d*)\.(\d*)/gm.exec(t);return[o,e,i]}function C(){return n("git rev-parse --is-inside-work-tree").status===0}function U(){return n("git rev-parse --show-toplevel").stdout.trim()}var l={gitPath:E,insideWorkTree:C,topLevelDirectory:U};var g=require("common-tags"),p=c(require("update-notifier"));var a={name:"git-mob",version:"2.4.0",description:"CLI tool for adding co-authors to commits.",scripts:{build:"rimraf dist && bob","test:w":"npm run build -- -w -t & env-cmd -f test-helpers/env.js ava --watch --serial --no-worker-threads",pretest:"npm run build -- -t",test:"npm run testbase",checks:"npm run test && npm run lint",lint:"xo --cwd=../../",testbase:"env-cmd -f test-helpers/env.js ava --serial --no-worker-threads",minifytest:"npm run build -- -m -t && npm run testbase",preversion:"npm run checks",prepack:"npm run build -- -m",postinstall:"node ./dist/install/create-author-file.js"},bin:{"git-mob":"bin/mob.js","git-mob-print":"bin/mob-print.js","git-solo":"bin/solo.js","git-add-coauthor":"bin/add-coauthor.js","git-delete-coauthor":"bin/delete-coauthor.js","git-edit-coauthor":"bin/edit-coauthor.js","git-suggest-coauthors":"bin/suggest-coauthors.js"},repository:{type:"git",url:"git@github.com:rkotze/git-mob.git",directory:"packages/git-mob"},engines:{node:">=10"},keywords:["cli","cli-app","git-pair","git-duet","git","github","co-author","pairing","pair programming","mob programming","extreme programming","xp","social coding"],author:"Richard Kotze",license:"MIT",contributors:[{name:"Richard Kotze",url:"https://github.com/rkotze"},{name:"Dennis Ideler",url:"https://github.com/dideler"}],dependencies:{"common-tags":"^1.8.0","git-mob-core":"^0.4.0",minimist:"^1.2.6","update-notifier":"^5.1.0"},devDependencies:{"@ava/typescript":"^3.0.1","@types/node":"^18.7.14","@types/sinon":"^10.0.13",ava:"^5.0.1",bob:"file:../../packages/bob","env-cmd":"^10.1.0",eol:"^0.9.1",rimraf:"^3.0.2",sinon:"^14.0.0",tempy:"^3.0.0",typescript:"^4.8.2"},ava:{files:["dist/**/*.spec.js"],ignoredByWatcher:["dist","test-env","test-helpers"],typescript:{rewritePaths:{"src/":"build/"},compile:!1}}};var O=1e3*60*60*24*7;function d(){let t=g.stripIndent`
    Usage
      $ git mob <co-author-initials> <GitHub username>
      $ git solo
      $ git mob-print
      $ git add-coauthor <co-author-initials> "Coauthor Name" <coauthor-email-address>
      $ git delete-coauthor <co-author-initials>
      $ git edit-coauthor <co-author-initials> --name="Coauthor Name" --email="coauthor-email-address"
      $ git suggest-coauthors

    Options
      -h  Prints usage information
      -v  Prints current version
      -l  Prints list of available co-authors
      -o  Overwrite the main author

    Examples
      $ git mob jd     # Set John Doe as co-author
      $ git mob jd am  # Set John & Amy as co-authors
      $ git mob rkotze # Set co-author from GitHub username
      $ git mob -l     # Show a list of all co-authors
      $ git mob -o jd  # Will change main author to jd
      $ git solo       # Dissipate the mob
      $ git mob-print  # Prints git-mob template to stdout. Used for prepare-commit-msg hook.
  `;console.log(t)}function h(){console.log(a.version)}function f(t=O){(0,p.default)({pkg:a,updateCheckInterval:t}).notify({isGlobal:!0})}f();var $=(0,b.default)(process.argv.slice(2),{alias:{h:"help",v:"version"}});$.help&&(d(),process.exit(0));$.version&&(h(),process.exit(0));l.insideWorkTree()||(console.error("Error: not a git repository"),process.exit(1));S();async function S(){try{await(0,s.solo)(),T()}catch(t){console.error(`Error: ${t.message}`),process.exit(1)}}function T(){console.log(A())}function A(){let{name:t,email:o}=(0,s.getPrimaryAuthor)();return v.oneLine`${t} <${o}>`}
