"use strict";var mt=Object.create;var v=Object.defineProperty;var ft=Object.getOwnPropertyDescriptor;var gt=Object.getOwnPropertyNames;var pt=Object.getPrototypeOf,dt=Object.prototype.hasOwnProperty;var wt=(t,r)=>()=>(t&&(r=t(t=0)),r);var f=(t,r)=>()=>(r||t((r={exports:{}}).exports,r),r.exports),F=(t,r)=>{for(var e in r)v(t,e,{get:r[e],enumerable:!0})},N=(t,r,e,n)=>{if(r&&typeof r=="object"||typeof r=="function")for(let u of gt(r))!dt.call(t,u)&&u!==e&&v(t,u,{get:()=>r[u],enumerable:!(n=ft(r,u))||n.enumerable});return t};var g=(t,r,e)=>(e=t!=null?mt(pt(t)):{},N(r||!t||!t.__esModule?v(e,"default",{value:t,enumerable:!0}):e,t)),S=t=>N(v({},"__esModule",{value:!0}),t);var O=f(_=>{"use strict";var{spawnSync:At}=require("child_process");function yt(t){return At(t,vt({shell:!0}))}function vt(t={}){return{...t,encoding:"utf8"}}_.silentRun=yt});var $=f((sr,J)=>{"use strict";var{exec:bt}=require("child_process"),{promisify:Et}=require("util"),{silentRun:d}=O();async function Tt(t){let r=Et(bt);try{return(await r(t,Rt())).stdout}catch(e){return`GitMob silentExec: "${t}" ${e.message}`}}function k(t){try{let r=d(t);return r.status!==0?`GitMob handleResponse: "${t}" ${r.stderr.trim()}`:r.stdout.trim()}catch(r){return`GitMob catch: "${t}" ${r.message}`}}function Gt(t){return k(`git config --get-all ${t}`)}function U(t){return k(`git config --get ${t}`)}function C(t){return d(`git config ${t}`).status===0}function St(t,r){return d(`git config --add ${t} "${r}"`)}function Ot(){return C("--local commit.template")}function Ct(){return C("--global commit.template")}function $t(){return U("--global commit.template")}function xt(t,r){let{status:e}=d(`git config ${t} "${r}"`);if(e!==0){let n=`Option ${t} has multiple values. Cannot overwrite multiple values for option ${t} with a single value.`;console.log(`GitMob set: ${n}`)}}function qt(t){return St("--global git-mob.co-author",t)}async function Mt(){return Tt("git shortlog -sen HEAD")}function Pt(){return d("git config --global --remove-section git-mob")}function Rt(t={}){return{...t,encoding:"utf8"}}J.exports={config:{getAll:Gt,get:U,has:C,set:xt},mob:{removeGitMobSection:Pt,gitAddCoAuthor:qt,usingLocalTemplate:Ot,usingGlobalTemplate:Ct,getGlobalTemplate:$t},getRepoAuthors:Mt}});var x={};F(x,{Author:()=>m});var m,p=wt(()=>{"use strict";m=class{constructor(r,e,n){this.key=r,this.name=e,this.email=n}format(){return`Co-authored-by: ${this.toString()}`}toString(){return`${this.name} <${this.email}>`}}});var q=f((ur,I)=>{"use strict";var{silentRun:B}=O();function Ht(){return B("git rev-parse --show-toplevel").stdout.trim()}function Lt(){return B("git rev-parse --is-inside-work-tree").status===0}I.exports={topLevelDirectory:Ht,insideWorkTree:Lt}});var b=f((ar,K)=>{"use strict";var w=require("fs"),Ft=require("os"),j=require("path"),{promisify:M}=require("util"),{Author:Nt}=(p(),S(x)),{topLevelDirectory:_t}=q();function kt(t,r,e){async function n(o){let s=t||M(w.readFile);try{return await s(o,"utf8")}catch(c){throw new Error(c.message)}}async function u(o,s){let c=r||M(w.appendFile);try{return await c(o,s,"utf8")}catch(l){throw new Error(l.message)}}async function i(o,s){let c=e||M(w.writeFile);try{return await c(o,s,"utf8")}catch(l){throw new Error(l.message)}}function a({name:o,email:s}){return`${o} <${s}>`}return{read:async()=>{let o=await n(A());try{return JSON.parse(o)}catch(s){throw new Error("Invalid JSON "+s.message)}},write:async o=>{try{return u(A(),JSON.stringify(o,null,2))}catch(s){throw new Error("Invalid JSON "+s.message)}},overwrite:async o=>{try{return i(A(),JSON.stringify(o,null,2))}catch(s){throw new Error("Invalid JSON "+s.message)}},fileExists:()=>w.existsSync(A()),coAuthors(o,s){let{coauthors:c}=s;return o.map(l=>(D(l,c),a(c[l])))},author(o,s){let{coauthors:c}=s;return D(o,c),c[o]},coAuthorsInitials(o,s){let{coauthors:c}=o;return Object.keys(c).reduce((l,y)=>(s.includes(a(c[y]))&&l.push(y),l),[])},toList(o){return Object.entries(o.coauthors).map(([c,{name:l,email:y}])=>new Nt(c,l,y))}}}function D(t,r){if(!(t in r))throw new Error(`Author with initials "${t}" not found!`)}function A(){if(process.env.GITMOB_COAUTHORS_PATH)return process.env.GITMOB_COAUTHORS_PATH;let t=".git-coauthors",r=j.join(_t(),t);return w.existsSync(r)?r:j.join(Ft.homedir(),t)}K.exports={gitAuthors:kt,pathToCoAuthors:A}});var V=f((cr,Q)=>{"use strict";var P=require("fs"),R=require("os");function W(t){return t.code!=="ENOENT"}function Ut(t,r){return new Promise((e,n)=>{P.readFile(t,"utf8",(u,i)=>{u&&W(u)&&n(u);let a=r;i&&(a=i.replace(/(\r\n|\r|\n){1,2}Co-authored-by.*/g,"")+r),P.writeFile(t,a,o=>{o&&n(o),e()})})})}function Jt(t){return new Promise((r,e)=>{P.readFile(t,"utf8",(n,u)=>{n&&W(n)&&e(n),r(u)})})}function z(t){return t.map(r=>r.format()).join(R.EOL)}function Bt(t,r,e){let n=r||Ut,u=e||Jt;return{writeCoAuthors:async i=>{let a=z(i);await n(t,R.EOL+R.EOL+a)},readCoAuthors:()=>u(t),removeCoAuthors:async()=>n(t,"")}}Q.exports={gitMessage:Bt,formatCoAuthorList:z}});var rt=f((hr,tt)=>{"use strict";var E=require("path"),It=require("os"),{config:X}=$(),{topLevelDirectory:Y}=q();function jt(){X.has("commit.template")||X.set("--global commit.template",Z())}function Dt(t){return process.env.GITMOB_MESSAGE_PATH?E.resolve(process.env.GITMOB_MESSAGE_PATH):t?E.resolve(Y(),t):E.relative(Y(),Z())}function Z(){return process.env.GITMOB_MESSAGE_PATH||E.join(It.homedir(),".gitmessage")}tt.exports={resolveGitMessagePath:Dt,setCommitTemplate:jt}});var ot=f((lr,et)=>{"use strict";var{Author:Kt}=(p(),S(x)),{gitAuthors:Wt}=b();async function zt(t){if(!Array.isArray(t))throw new TypeError("saveNewCoAuthors argument should be an Array of Authors");let r=Wt(),e=await r.read(),n=[];for(let u of t){let{key:i,name:a,email:o}=u;if(i in e.coauthors)throw new Error(`Duplicate key ${i} exists in .git-coauthors`);e.coauthors[i]={name:a,email:o},n.push(new Kt(i,a,o))}return await r.overwrite(e),n}et.exports={saveNewCoAuthors:zt}});var or={};F(or,{Author:()=>m,fetchGitHubAuthors:()=>st,getAllAuthors:()=>at,getPrimaryAuthor:()=>rr,getSelectedCoAuthors:()=>tr,pathToCoAuthors:()=>lt.pathToCoAuthors,saveNewCoAuthors:()=>ht.saveNewCoAuthors,setCoAuthors:()=>Yt,setPrimaryAuthor:()=>er,solo:()=>ct,updateGitTemplate:()=>L});module.exports=S(or);var h=g($());p();var ut=g(b()),T=g(V()),G=g(rt()),ht=g(ot()),lt=g(b());p();var nt=g(require("https"));async function it(t,r){return new Promise((e,n)=>{nt.default.request(t,r,i=>{let a="";i.on("data",o=>{a+=o}),i.on("end",()=>{e({statusCode:i.statusCode,data:JSON.parse(a)})})}).on("error",i=>{n(i)}).end()})}var Qt="https://api.github.com/users",H={headers:{Accept:"application/vnd.github.v3+json",method:"GET"}};function Vt(t){return"id"in t&&"login"in t&&"name"in t}async function st(t,r,e=it){if(!r)throw new Error("Error no user-agent header string given.");H.headers={...H.headers,"user-agent":r};let n=await Promise.all(t.map(async i=>e(Qt+"/"+i,H))),u=[];for(let i of n)if(Xt(i.statusCode),Vt(i.data)){let{login:a,id:o,name:s}=i.data;u.push(new m(a,s,`${o}+${a}@users.noreply.github.com`))}return u}function Xt(t){if(t===404)throw new Error("GitHub user not found!");if(t&&t>299)throw new Error(`Error failed to fetch GitHub user! Status code ${t}.`)}p();async function at(){let t=(0,ut.gitAuthors)();return t.toList(await t.read())}async function Yt(t){await ct();let r=Zt(t,await at());for(let e of r)h.mob.gitAddCoAuthor(e.toString());return await L(r),r}async function L(t){let r=h.mob.usingLocalTemplate(),e=(0,T.gitMessage)((0,G.resolveGitMessagePath)(h.config.get("commit.template")));return t&&t.length>0?(r&&await(0,T.gitMessage)(h.mob.getGlobalTemplate()).writeCoAuthors(t),e.writeCoAuthors(t)):(r&&await(0,T.gitMessage)(h.mob.getGlobalTemplate()).removeCoAuthors(),e.removeCoAuthors())}function Zt(t,r){return r.filter(e=>t.includes(e.key))}function tr(t){let r="",e="--global git-mob.co-author";return h.config.has(e)&&(r=h.config.getAll(e)),t.filter(n=>r.includes(n.email))}async function ct(){return(0,G.setCommitTemplate)(),h.mob.removeGitMobSection(),L()}function rr(){let t=h.config.get("user.name"),r=h.config.get("user.email");return t&&r?new m("prime",t,r):null}function er(t){t&&(h.config.set("user.name",t.name),h.config.set("user.email",t.email))}0&&(module.exports={Author,fetchGitHubAuthors,getAllAuthors,getPrimaryAuthor,getSelectedCoAuthors,pathToCoAuthors,saveNewCoAuthors,setCoAuthors,setPrimaryAuthor,solo,updateGitTemplate});
